{"version":3,"sources":["../../web-element/node_modules/@stencil/core/internal/client/shadow-css.js"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","makeScopeMatcher","test","applyStrictSelectorScope","hostSelector","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","scopedPart","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","scopeCss","commentsWithHash","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"mappings":"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","file":"static/js/4.257a8f2c.chunk.js","sourcesContent":["/*\n Stencil Client Platform v2.6.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"sourceRoot":""}