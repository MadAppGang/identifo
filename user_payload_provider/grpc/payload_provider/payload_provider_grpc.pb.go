// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: user_payload_provider/grps/payload_provider/payload_provider.proto

package payload_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PayloadProviderService_TokenPayload_FullMethodName = "/payload_provider.PayloadProviderService/TokenPayload"
	PayloadProviderService_Close_FullMethodName        = "/payload_provider.PayloadProviderService/Close"
)

// PayloadProviderServiceClient is the client API for PayloadProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayloadProviderServiceClient interface {
	TokenPayload(ctx context.Context, in *TokenPayloadRequest, opts ...grpc.CallOption) (*TokenPayloadResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type payloadProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayloadProviderServiceClient(cc grpc.ClientConnInterface) PayloadProviderServiceClient {
	return &payloadProviderServiceClient{cc}
}

func (c *payloadProviderServiceClient) TokenPayload(ctx context.Context, in *TokenPayloadRequest, opts ...grpc.CallOption) (*TokenPayloadResponse, error) {
	out := new(TokenPayloadResponse)
	err := c.cc.Invoke(ctx, PayloadProviderService_TokenPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payloadProviderServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, PayloadProviderService_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayloadProviderServiceServer is the server API for PayloadProviderService service.
// All implementations must embed UnimplementedPayloadProviderServiceServer
// for forward compatibility
type PayloadProviderServiceServer interface {
	TokenPayload(context.Context, *TokenPayloadRequest) (*TokenPayloadResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedPayloadProviderServiceServer()
}

// UnimplementedPayloadProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayloadProviderServiceServer struct {
}

func (UnimplementedPayloadProviderServiceServer) TokenPayload(context.Context, *TokenPayloadRequest) (*TokenPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPayload not implemented")
}
func (UnimplementedPayloadProviderServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedPayloadProviderServiceServer) mustEmbedUnimplementedPayloadProviderServiceServer() {
}

// UnsafePayloadProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayloadProviderServiceServer will
// result in compilation errors.
type UnsafePayloadProviderServiceServer interface {
	mustEmbedUnimplementedPayloadProviderServiceServer()
}

func RegisterPayloadProviderServiceServer(s grpc.ServiceRegistrar, srv PayloadProviderServiceServer) {
	s.RegisterService(&PayloadProviderService_ServiceDesc, srv)
}

func _PayloadProviderService_TokenPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadProviderServiceServer).TokenPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadProviderService_TokenPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadProviderServiceServer).TokenPayload(ctx, req.(*TokenPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayloadProviderService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayloadProviderServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayloadProviderService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayloadProviderServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayloadProviderService_ServiceDesc is the grpc.ServiceDesc for PayloadProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayloadProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payload_provider.PayloadProviderService",
	HandlerType: (*PayloadProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenPayload",
			Handler:    _PayloadProviderService_TokenPayload_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _PayloadProviderService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_payload_provider/grps/payload_provider/payload_provider.proto",
}
