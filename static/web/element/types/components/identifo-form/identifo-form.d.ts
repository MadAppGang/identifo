import { ApiError, IdentifoAuth, LoginResponse, TFAType, FederatedLoginProvider, TFAStatus } from '@identifo/identifo-auth-js';
import { EventEmitter } from '../../stencil-public-runtime';
export declare type Routes = 'login' | 'register' | 'tfa/verify/sms' | 'tfa/verify/email' | 'tfa/verify/app' | 'tfa/verify/select' | 'tfa/setup/sms' | 'tfa/setup/email' | 'tfa/setup/app' | 'tfa/setup/select' | 'password/reset' | 'password/forgot' | 'password/forgot/tfa/sms' | 'password/forgot/tfa/email' | 'password/forgot/tfa/app' | 'password/forgot/tfa/select' | 'callback' | 'otp/login' | 'error' | 'password/forgot/success' | 'logout' | 'loading';
export declare type TFASetupRoutes = 'tfa/setup/select' | 'tfa/setup/sms' | 'tfa/setup/email' | 'tfa/setup/app';
export declare type TFALoginVerifyRoutes = 'tfa/verify/select' | 'tfa/verify/sms' | 'tfa/verify/email' | 'tfa/verify/app';
export declare type TFAResetVerifyRoutes = 'password/forgot/tfa/select' | 'password/forgot/tfa/sms' | 'password/forgot/tfa/email' | 'password/forgot/tfa/app';
export declare class IdentifoForm {
  route: Routes;
  token: string;
  appId: string;
  url: string;
  theme: 'dark' | 'light' | 'auto';
  scopes: string;
  callbackUrl: string;
  federatedRedirectUrl: string;
  postLogoutRedirectUri: string;
  debug: boolean;
  selectedTheme: 'dark' | 'light';
  auth: IdentifoAuth;
  username: string;
  password: string;
  phone: string;
  email: string;
  registrationForbidden: boolean;
  tfaCode: string;
  tfaTypes: TFAType[];
  federatedProviders: string[];
  tfaStatus: TFAStatus;
  provisioningURI: string;
  provisioningQR: string;
  success: boolean;
  lastError: ApiError;
  lastResponse: LoginResponse;
  complete: EventEmitter<LoginResponse>;
  error: EventEmitter<ApiError>;
  processError(e: ApiError): void;
  redirectTfa(prefix: string): string;
  afterLoginRedirect: (e: LoginResponse) => "callback" | TFASetupRoutes | TFALoginVerifyRoutes;
  loginCatchRedirect: (data: ApiError) => TFASetupRoutes;
  signIn(): Promise<void>;
  loginWith(provider: FederatedLoginProvider): Promise<void>;
  signUp(): Promise<void>;
  verifyTFA(): Promise<void>;
  selectTFA(type: TFAType): Promise<void>;
  setupTFA(type: TFAType): Promise<void>;
  restorePassword(): void;
  setNewPassword(): void;
  openRoute(route: Routes): void;
  usernameChange(event: InputEvent): void;
  passwordChange(event: InputEvent): void;
  emailChange(event: InputEvent): void;
  phoneChange(event: InputEvent): void;
  tfaCodeChange(event: InputEvent): void;
  validateEmail(email: string): boolean;
  renderBackToLogin(): any;
  renderRoute(route: Routes): any;
  componentWillLoad(): Promise<void>;
  componentWillRender(): void;
  render(): any;
}
