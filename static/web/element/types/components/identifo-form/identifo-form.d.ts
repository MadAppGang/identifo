import { ApiError, IdentifoAuth, LoginResponse, TFAType, FederatedLoginProvider } from '@identifo/identifo-auth-js';
import { EventEmitter } from '../../stencil-public-runtime';
export declare type Routes = 'login' | 'register' | 'tfa/verify' | 'tfa/setup' | 'password/reset' | 'password/forgot' | 'callback' | 'otp/login' | 'error' | 'password/forgot/success' | 'logout' | 'loading';
export declare class IdentifoForm {
  route: Routes;
  token: string;
  appId: string;
  url: string;
  theme: 'dark' | 'light';
  scopes: string;
  callbackUrl: string;
  federatedRedirectUrl: string;
  postLogoutRedirectUri: string;
  debug: boolean;
  auth: IdentifoAuth;
  username: string;
  password: string;
  phone: string;
  email: string;
  registrationForbidden: boolean;
  tfaCode: string;
  tfaType: TFAType;
  federatedProviders: string[];
  tfaMandatory: boolean;
  provisioningURI: string;
  provisioningQR: string;
  success: boolean;
  lastError: ApiError;
  lastResponse: LoginResponse;
  complete: EventEmitter<LoginResponse>;
  error: EventEmitter<ApiError>;
  processError(e: ApiError): void;
  afterLoginRedirect: (e: LoginResponse) => "tfa/verify" | "tfa/setup" | "callback";
  loginCatchRedirect: (data: ApiError) => 'tfa/setup';
  signIn(): Promise<void>;
  loginWith(provider: FederatedLoginProvider): Promise<void>;
  signUp(): Promise<void>;
  verifyTFA(): Promise<void>;
  setupTFA(): Promise<void>;
  restorePassword(): void;
  setNewPassword(): void;
  openRoute(route: Routes): void;
  usernameChange(event: InputEvent): void;
  passwordChange(event: InputEvent): void;
  emailChange(event: InputEvent): void;
  phoneChange(event: InputEvent): void;
  tfaCodeChange(event: InputEvent): void;
  validateEmail(email: string): boolean;
  renderRoute(route: Routes): any;
  componentWillLoad(): Promise<void>;
  componentWillRender(): void;
  render(): any;
}
