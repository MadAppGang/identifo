// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: impersonation/grpc/impersonation_provider/impersonation.proto

package impersonation_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImpersonationProvider_CanImpersonate_FullMethodName = "/impersonation_provider.ImpersonationProvider/CanImpersonate"
	ImpersonationProvider_Close_FullMethodName          = "/impersonation_provider.ImpersonationProvider/Close"
)

// ImpersonationProviderClient is the client API for ImpersonationProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpersonationProviderClient interface {
	CanImpersonate(ctx context.Context, in *CanImpersonateRequest, opts ...grpc.CallOption) (*CanImpersonateResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type impersonationProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewImpersonationProviderClient(cc grpc.ClientConnInterface) ImpersonationProviderClient {
	return &impersonationProviderClient{cc}
}

func (c *impersonationProviderClient) CanImpersonate(ctx context.Context, in *CanImpersonateRequest, opts ...grpc.CallOption) (*CanImpersonateResponse, error) {
	out := new(CanImpersonateResponse)
	err := c.cc.Invoke(ctx, ImpersonationProvider_CanImpersonate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impersonationProviderClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, ImpersonationProvider_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpersonationProviderServer is the server API for ImpersonationProvider service.
// All implementations must embed UnimplementedImpersonationProviderServer
// for forward compatibility
type ImpersonationProviderServer interface {
	CanImpersonate(context.Context, *CanImpersonateRequest) (*CanImpersonateResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedImpersonationProviderServer()
}

// UnimplementedImpersonationProviderServer must be embedded to have forward compatible implementations.
type UnimplementedImpersonationProviderServer struct {
}

func (UnimplementedImpersonationProviderServer) CanImpersonate(context.Context, *CanImpersonateRequest) (*CanImpersonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanImpersonate not implemented")
}
func (UnimplementedImpersonationProviderServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedImpersonationProviderServer) mustEmbedUnimplementedImpersonationProviderServer() {}

// UnsafeImpersonationProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpersonationProviderServer will
// result in compilation errors.
type UnsafeImpersonationProviderServer interface {
	mustEmbedUnimplementedImpersonationProviderServer()
}

func RegisterImpersonationProviderServer(s grpc.ServiceRegistrar, srv ImpersonationProviderServer) {
	s.RegisterService(&ImpersonationProvider_ServiceDesc, srv)
}

func _ImpersonationProvider_CanImpersonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanImpersonateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpersonationProviderServer).CanImpersonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpersonationProvider_CanImpersonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpersonationProviderServer).CanImpersonate(ctx, req.(*CanImpersonateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpersonationProvider_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpersonationProviderServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpersonationProvider_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpersonationProviderServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpersonationProvider_ServiceDesc is the grpc.ServiceDesc for ImpersonationProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpersonationProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "impersonation_provider.ImpersonationProvider",
	HandlerType: (*ImpersonationProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanImpersonate",
			Handler:    _ImpersonationProvider_CanImpersonate_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ImpersonationProvider_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "impersonation/grpc/impersonation_provider/impersonation.proto",
}
